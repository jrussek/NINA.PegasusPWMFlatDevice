// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace NINA.NinaPegasusPWMFlat.NinaPegasusPWMFlatDrivers
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IPegasusAstro
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Reporting/Device")]
        Task<DeviceInfoIEnumerableRJesResult> ReportingDevice(CancellationToken cancellationToken = default);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Reporting/Device/{uniquekey}/Dates")]
        Task<DateTimeDayRangeMessageIEnumerableRJesResult> ReportingDeviceDatesGet(System.Guid uniquekey, CancellationToken cancellationToken = default);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Reporting/Device/{uniquekey}/Dates/{fromUnixTimeSeconds}/{toUnitTimeSeconds}")]
        Task<DocumentEntryMessageIEnumerableRJesResult> ReportingDeviceDatesGet(System.Guid uniquekey, long fromUnixTimeSeconds, long toUnitTimeSeconds, CancellationToken cancellationToken = default);

        /// <summary>Get the connected devices.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Server/DeviceManager/Connected")]
        Task<DeviceInfoIEnumerableRJesResult> ServerDeviceManagerConnected(CancellationToken cancellationToken = default);

        /// <summary>Starts the AppServer.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Server/Start")]
        Task<BooleanRJesResult> ServerStart(CancellationToken cancellationToken = default);

        /// <summary>Stops the AppServer.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Server/Stop")]
        Task<BooleanRJesResult> ServerStop(CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverDMFCPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/DMFC/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverDMFCStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/DMFC/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverDMFCStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverDMFCActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverDMFCFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverDMFCMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverDMFCMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverDMFCMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/DMFC/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverDMFCMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/DMFC/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverDMFCMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/DMFC/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverDMFCMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverDMFCMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverDMFCMotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverDMFCMotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverDMFCMotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverDMFCMotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverDMFCMotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverDMFCMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverDMFCMotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverDMFCMotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor encoder state;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Encoder")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverDMFCMotorEncoder([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Encoder/On")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverDMFCMotorEncoderOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Encoder/Off")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverDMFCMotorEncoderOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Led state</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Led")]
        Task<LedStateMessageDriverMessageRJesResult> DriverDMFCLed([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverDMFCLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverDMFCLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor type.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Motor/Type")]
        Task<MotorTypeMessageDriverMessageRJesResult> DriverDMFCMotorType([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor type to DC.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Type/DC")]
        Task<MotorTypeMessageDriverMessageRJesResult> DriverDMFCMotorTypeDC([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor type to Stepper.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Motor/Type/Stepper")]
        Task<MotorTypeMessageDriverMessageRJesResult> DriverDMFCMotorTypeStepper([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/DMFC/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/DMFC/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverDMFCEnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFalconPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Falcon/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFalconStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Falcon/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFalconStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFalconActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFalconFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Park at position 0.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Falcon/Park")]
        Task<ParkMessageDriverMessageRJesResult> DriverFalconPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of rotator in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Position/Degrees")]
        Task<CurrentPositionDegreesMessageDriverMessageRJesResult> DriverFalconPositionDegrees([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move status</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverFalconMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Falcon/Move/Absolute/{degrees}")]
        Task<MoveAbsolutePositionDegreesMessageDriverMessageRJesResult> DriverFalconMoveAbsolute(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Falcon/Move/Relative/{degrees}")]
        Task<MoveRelativePositionDegreesMessageDriverMessageRJesResult> DriverFalconMoveRelative(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Falcon/Halt")]
        Task<CurrentPositionDegreesMessageDriverMessageRJesResult> DriverFalconHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing position) to degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Falcon/Sync/{degrees}")]
        Task<PositionSyncDegreesMessageDriverMessageRJesResult> DriverFalconSync(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get movement direction Normal or Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Falcon/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set movement direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Falcon/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set movement direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Falcon/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFalconV2Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FalconV2/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFalconV2Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FalconV2/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFalconV2Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFalconV2Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFalconV2FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of rotator in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Position/Degrees")]
        Task<CurrentPositionDegreesMessageDriverMessageRJesResult> DriverFalconV2PositionDegrees([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move status</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverFalconV2MoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Move/Absolute/{degrees}")]
        Task<MoveAbsolutePositionDegreesMessageDriverMessageRJesResult> DriverFalconV2MoveAbsolute(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Move/Relative/{degrees}")]
        Task<MoveRelativePositionDegreesMessageDriverMessageRJesResult> DriverFalconV2MoveRelative(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Halt")]
        Task<CurrentPositionDegreesMessageDriverMessageRJesResult> DriverFalconV2Halt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing position) to degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FalconV2/Sync/{degrees}")]
        Task<PositionSyncDegreesMessageDriverMessageRJesResult> DriverFalconV2Sync(string degrees, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get movement direction Normal or Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconV2Direction([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set movement direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FalconV2/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconV2DirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set movement direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FalconV2/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFalconV2DirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current hotspot configuration</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Hotspot")]
        Task<HotspotMessageDriverMessageRJesResult> DriverFalconV2Hotspot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Hotspot status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Hotspot/Status")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFalconV2HotspotStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FalconV2/Hotspot/On")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFalconV2HotspotOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FalconV2/Hotspot/Off")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFalconV2HotspotOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Hotspot SSID and password</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Hotspot/SSID/{ssid}/Password/{password}")]
        Task<HotspotMessageDriverMessageRJesResult> DriverFalconV2HotspotSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current wifi connection info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Wifi")]
        Task<WifiStatusMessageDriverMessageRJesResult> DriverFalconV2Wifi([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Scan for available wifi networks</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Wifi/Scan")]
        Task<AvailableWifiNetworksMessageDriverMessageRJesResult> DriverFalconV2WifiScan([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Connect to wifi</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Wifi/Connect/SSID/{ssid}/Password/{password}")]
        Task<WifiInfoMessageDriverMessageRJesResult> DriverFalconV2WifiConnectSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Wifi factory reset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Wifi/FactoryReset")]
        Task<EmptyMessageDriverMessageRJesResult> DriverFalconV2WifiFactoryReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi channel 1~11</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FalconV2/Wifi/Channel/{value}")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverFalconV2WifiChannelPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi channel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FalconV2/Wifi/Channel")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverFalconV2WifiChannelGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFlatMasterPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FlatMaster/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFlatMasterStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FlatMaster/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFlatMasterStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFlatMasterActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFlatMasterFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Turns On the panel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/On")]
        Task<PanelStateMessageDriverMessageRJesResult> DriverFlatMasterPanelOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Turns Off the panel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/Off")]
        Task<PanelStateMessageDriverMessageRJesResult> DriverFlatMasterPanelOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Brightness Profile</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/Brightness/Profile/{profile}")]
        Task<BrightnessProfileDataMessageDriverMessageRJesResult> DriverFlatMasterPanelBrightnessProfilePut(int profile, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get available brightness profiles</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Panel/Brightness/Profile")]
        Task<BrightnessProfileDataCollectionMessageDriverMessageRJesResult> DriverFlatMasterPanelBrightnessProfileGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Brightness 1 ~ 100</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Panel/Brightness")]
        Task<PanelBrightnessLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelBrightnessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Light Brightness 1 ~ 100</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/Brightness/{level}")]
        Task<PanelBrightnessLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelBrightnessPut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Light Brightness 0 ~ 3000</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/Frequency/{level}")]
        Task<PanelFrequencyLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelFrequencyPut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Panel Frequency.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Panel/Frequency")]
        Task<PanelFrequencyLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelFrequencyGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Panel pulse 1 ~ 255</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster/Panel/Pulse/{level}")]
        Task<PanelPulseLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelPulsePut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Panel Frequency.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster/Panel/Pulse")]
        Task<PanelPulseLevelMessageDriverMessageRJesResult> DriverFlatMasterPanelPulseGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFlatMaster250LPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FlatMaster250L/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFlatMaster250LStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FlatMaster250L/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFlatMaster250LStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFlatMaster250LActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFlatMaster250LFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Turns On the panel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/On")]
        Task<PanelStateMessageDriverMessageRJesResult> DriverFlatMaster250LPanelOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Turns Off the panel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/Off")]
        Task<PanelStateMessageDriverMessageRJesResult> DriverFlatMaster250LPanelOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Brightness Profile</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/Brightness/Profile/{profile}")]
        Task<BrightnessProfileDataMessageDriverMessageRJesResult> DriverFlatMaster250LPanelBrightnessProfilePut(int profile, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get available brightness profiles</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Panel/Brightness/Profile")]
        Task<BrightnessProfileDataCollectionMessageDriverMessageRJesResult> DriverFlatMaster250LPanelBrightnessProfileGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Brightness 1 ~ 100</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Panel/Brightness")]
        Task<PanelBrightnessLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelBrightnessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Light Brightness 1 ~ 100</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/Brightness/{level}")]
        Task<PanelBrightnessLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelBrightnessPut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Light Brightness 0 ~ 3000</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/Frequency/{level}")]
        Task<PanelFrequencyLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelFrequencyPut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Panel Frequency.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Panel/Frequency")]
        Task<PanelFrequencyLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelFrequencyGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Panel pulse 1 ~ 255</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FlatMaster250L/Panel/Pulse/{level}")]
        Task<PanelPulseLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelPulsePut(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Panel Frequency.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FlatMaster250L/Panel/Pulse")]
        Task<PanelPulseLevelMessageDriverMessageRJesResult> DriverFlatMaster250LPanelPulseGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFocusCubePerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCubeStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCubeStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Send a custom command as Base64 to device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube/Command/{cmd}")]
        Task<CustomCommandMessageRJesResult> DriverFocusCubeCommand(string cmd, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFocusCubeActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFocusCubeFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCubeMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCubeMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCubeMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverFocusCubeMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverFocusCubeMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCubeMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverFocusCubeMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCubeMotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCubeMotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeMotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeMotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeMotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverFocusCubeMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCubeMotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCubeMotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor encoder state;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Motor/Encoder")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeMotorEncoder([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Encoder/On")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeMotorEncoderOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Motor/Encoder/Off")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeMotorEncoderOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Led state</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Led")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeLed([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeEnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFocusCube3Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube3/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCube3Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube3/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCube3Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Send a custom command as Base64 to device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCube3/Command/{cmd}")]
        Task<CustomCommandMessageRJesResult> DriverFocusCube3Command(string cmd, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFocusCube3Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFocusCube3FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCube3MotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCube3MotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCube3MotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverFocusCube3MotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverFocusCube3MotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCube3MotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverFocusCube3MotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCube3MotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCube3MotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCube3MotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCube3MotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCube3MotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverFocusCube3MotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCube3MotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCube3MotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCube3EnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current hotspot configuration</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Hotspot")]
        Task<HotspotMessageDriverMessageRJesResult> DriverFocusCube3Hotspot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Hotspot status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Hotspot/Status")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFocusCube3HotspotStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Hotspot/On")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFocusCube3HotspotOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCube3/Hotspot/Off")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverFocusCube3HotspotOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Hotspot SSID and password</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Hotspot/SSID/{ssid}/Password/{password}")]
        Task<HotspotMessageDriverMessageRJesResult> DriverFocusCube3HotspotSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current wifi connection info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Wifi")]
        Task<WifiStatusMessageDriverMessageRJesResult> DriverFocusCube3Wifi([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Scan for available wifi networks</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Wifi/Scan")]
        Task<AvailableWifiNetworksMessageDriverMessageRJesResult> DriverFocusCube3WifiScan([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Connect to wifi</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Wifi/Connect/SSID/{ssid}/Password/{password}")]
        Task<WifiInfoMessageDriverMessageRJesResult> DriverFocusCube3WifiConnectSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Wifi factory reset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Wifi/FactoryReset")]
        Task<EmptyMessageDriverMessageRJesResult> DriverFocusCube3WifiFactoryReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi channel 1~11</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCube3/Wifi/Channel/{value}")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverFocusCube3WifiChannelPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi channel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCube3/Wifi/Channel")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverFocusCube3WifiChannelGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverFocusCubeZeroPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCubeZero/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCubeZeroStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/FocusCubeZero/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverFocusCubeZeroStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverFocusCubeZeroActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverFocusCubeZeroFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCubeZero/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCubeZero/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/FocusCubeZero/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor encoder state;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Motor/Encoder")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorEncoder([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Encoder/On")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorEncoderOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable motor encoder.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Motor/Encoder/Off")]
        Task<MotorEncoderStateMessageDriverMessageRJesResult> DriverFocusCubeZeroMotorEncoderOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Led state</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Led")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeZeroLed([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeZeroLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverFocusCubeZeroLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/FocusCubeZero/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/FocusCubeZero/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverFocusCubeZeroEnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverIndigoPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Indigo/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverIndigoStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Indigo/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverIndigoStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverIndigoActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverIndigoFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Initialize the wheel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Indigo/Init")]
        Task<WheelPositionMessageDriverMessageRJesResult> DriverIndigoInit([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move to new position.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Indigo/Move/{position}")]
        Task<WheelPositionMessageDriverMessageRJesResult> DriverIndigoMove(int position, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current position;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/Position")]
        Task<WheelPositionMessageDriverMessageRJesResult> DriverIndigoPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get moving status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverIndigoStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Indigo/FilterOffset")]
        Task<FilterOffsetMessageDriverMessageRJesResult> DriverIndigoFilterOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Indigo/FilterOffset/{steps}")]
        Task<FilterOffsetMessageDriverMessageRJesResult> DriverIndigoFilterOffsetPut(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverNYX101Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/NYX101/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverNYX101Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/NYX101/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverNYX101Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverNYX101Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverNYX101FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Reboot")]
        Task DriverNYX101Reboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Communication Channel info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Channel/Info")]
        Task<ChannelStatusMessageDriverMessageRJesResult> DriverNYX101ChannelInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Right Ascension</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/RightAscension")]
        Task<RightAscensionMessageDriverMessageRJesResult> DriverNYX101RightAscension([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Declination</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Declination")]
        Task<DeclinationMessageDriverMessageRJesResult> DriverNYX101Declination([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Azimuth</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Azimuth")]
        Task<AzimuthMessageDriverMessageRJesResult> DriverNYX101Azimuth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Altitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Altitude")]
        Task<AltitudeMessageDriverMessageRJesResult> DriverNYX101Altitude([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Sidereal Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/SiderealTime")]
        Task<SiderealTimeMessageDriverMessageRJesResult> DriverNYX101SiderealTime([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Home Position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HomeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Home at current mount position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HomePost([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Go to home position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/GoTo/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101GoToHome([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Celestial Coordinates of Park</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101ParkGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Park at current mount position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101ParkPost([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo Park</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/GoTo/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101GoToPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>UnPark</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/UnPark")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101UnPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get GuideRate</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/GuideRate")]
        Task<GuideRateMessageDriverMessageRJesResult> DriverNYX101GuideRateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set GuideRate</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/GuideRate/{rate}")]
        Task<GuideRateMessageDriverMessageRJesResult> DriverNYX101GuideRatePut(string rate, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Pulse/North/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX101PulseNorth(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Pulse/South/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX101PulseSouth(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Pulse/East/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX101PulseEast(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Pulse/West/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX101PulseWest(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync point passing Ra/Dec values</summary>
        /// <param name="rA">Passing one of the following formats: 12h20m30s or 12:20:30 or 12*20:30 or 12|20|30</param>
        /// <param name="dEC">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Sync/{RA}/{DEC}")]
        Task<EquatorialCoordinatesMessageDriverMessageRJesResult> DriverNYX101Sync([AliasAs("RA")] string rA, [AliasAs("DEC")] string dEC, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Elevation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Elevation")]
        Task<ElevationMessageDriverMessageRJesResult> DriverNYX101ElevationGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Elevation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Elevation/{meters}")]
        Task<ElevationMessageDriverMessageRJesResult> DriverNYX101ElevationPut(int meters, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo AltAz</summary>
        /// <param name="aLT">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="aZ">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/GoTo/Alt/{ALT}/Az/{AZ}")]
        Task<HorizontalCoordinatesMessageDriverMessageRJesResult> DriverNYX101GoToAltAz([AliasAs("ALT")] string aLT, [AliasAs("AZ")] string aZ, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo  Ra/Dec</summary>
        /// <param name="rA">Passing one of the following formats: 12h20m30s or 12:20:30 or 12*20:30 or 12|20|30</param>
        /// <param name="dEC">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/GoTo/Ra/{RA}/Dec/{DEC}")]
        Task<EquatorialCoordinatesMessageDriverMessageRJesResult> DriverNYX101GoToRaDec([AliasAs("RA")] string rA, [AliasAs("DEC")] string dEC, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get mount move speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/MoveSpeed")]
        Task<MoveSpeedRateStatusMessageDriverMessageRJesResult> DriverNYX101MoveSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/MoveSpeed/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX101MoveSpeedPost(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Ra mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/MoveSpeed/RA/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX101MoveSpeedRA(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/MoveSpeed/DEC/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX101MoveSpeedDEC(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Move/North")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX101MoveNorth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Move/South")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX101MoveSouth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Move/East")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX101MoveEast([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Move/West")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX101MoveWest([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move spiral search at current guiding rate.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Move/Spiral")]
        Task<MoveSpiralMessageDriverMessageRJesResult> DriverNYX101MoveSpiral([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Halt")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101Halt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Halt/East")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HaltEast([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Halt/West")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HaltWest([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Halt/North")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HaltNorth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Halt/South")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX101HaltSouth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Sidereal</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/Sidereal")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX101TrackingSidereal([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Lunar</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/Lunar")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX101TrackingLunar([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Solar</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/Solar")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX101TrackingSolar([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to King</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/King")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX101TrackingKing([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/On")]
        Task<TrackingStatusMessageDriverMessageRJesResult> DriverNYX101TrackingOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Tracking/Off")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX101TrackingOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Refraction Compensation on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/RefractionCompensation/On")]
        Task<RefractionCompensationMessageDriverMessageRJesResult> DriverNYX101RefractionCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/TrackingRate/Offset/DEC/{value}")]
        Task<DECTrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX101TrackingRateOffsetDEC(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Dec tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/TrackingRate/DEC/Offset")]
        Task<DECTrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX101TrackingRateDECOffset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set RA tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/TrackingRate/RA/Offset/{value}")]
        Task<RATrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX101TrackingRateRAOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get RA tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/TrackingRate/RA/Offset")]
        Task<RATrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX101TrackingRateRAOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Refraction Compensation off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/RefractionCompensation/Off")]
        Task<RefractionCompensationMessageDriverMessageRJesResult> DriverNYX101RefractionCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Date</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Date")]
        Task<DateMessageDriverMessageRJesResult> DriverNYX101DateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Date</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Date/{month}/{day}/{year}")]
        Task<DateMessageDriverMessageRJesResult> DriverNYX101DatePost(int month, int day, int year, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Time")]
        Task<TimeMessageDriverMessageRJesResult> DriverNYX101TimeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Time/{hour}/{minute}/{second}")]
        Task<TimeMessageDriverMessageRJesResult> DriverNYX101TimePost(int hour, int minute, int second, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get UTC Offset without daylight savings.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/UTCOffset")]
        Task<UTCOffsetMessageDriverMessageRJesResult> DriverNYX101UTCOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set UTC Offset without daylight savings.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/UTCOffset/{offset}")]
        Task<UTCOffsetMessageDriverMessageRJesResult> DriverNYX101UTCOffsetPost(string offset, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Latitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Latitude")]
        Task<LatitudeMessageDriverMessageRJesResult> DriverNYX101LatitudeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set latitude</summary>
        /// <param name="lat">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Latitude/{lat}")]
        Task<LatitudeMessageDriverMessageRJesResult> DriverNYX101LatitudePost(string lat, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Longitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Longitude")]
        Task<LongitudeMessageDriverMessageRJesResult> DriverNYX101LongitudeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Longitude</summary>
        /// <param name="lon">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Longitude/{lon}")]
        Task<LongitudeMessageDriverMessageRJesResult> DriverNYX101LongitudePost(string lon, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Swap pier side.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/SwapPier")]
        Task<PierDirectionMessageDriverMessageRJesResult> DriverNYX101SwapPier([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get slew rate in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/SlewRate")]
        Task<SlewRateDegreeMessageDriverMessageRJesResult> DriverNYX101SlewRateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set slew rate preset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/SlewRate/{rate}")]
        Task<SlewRateMessageDriverMessageRJesResult> DriverNYX101SlewRatePut(int rate, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Meridian limit in minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Limit/Meridian")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX101LimitMeridian([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Meridian limit for East and West in minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Limit/Meridian/East/{east}/West/{west}")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX101LimitMeridianEastWest(int east, int west, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Elevation limit in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Limit/Elevation")]
        Task<ElevationLimitMessageDriverMessageRJesResult> DriverNYX101LimitElevation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Elevation in degrees for Lower Limit(above or below horizon acceptable values -30 ~ 30) and Higher Limit(overhead acceptable values 60 - 90)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Limit/Elevation/Lower/{lower}/Higher/{higher}")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX101LimitElevationLowerHigher(int lower, int higher, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Backlash/Dec")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX101BacklashDecGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Backlash/Dec/{value}")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX101BacklashDecPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get RA backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Backlash/RA")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX101BacklashRAGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Backlash/RA/{value}")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX101BacklashRAPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Leveller Pitch and Roll</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Leveller")]
        Task<LevellerMessageDriverMessageRJesResult> DriverNYX101Leveller([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reset Leveller</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Leveller/Reset")]
        Task<LevellerMessageDriverMessageRJesResult> DriverNYX101LevellerReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Iniate Align passing the length of stars.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Align/Initiate/{stars}")]
        Task<AlignInitiatorMessageDriverMessageRJesResult> DriverNYX101AlignInitiate(int stars, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Add mount's current position as alignment point.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Align/AddPoint")]
        Task<AlignPointMessageDriverMessageRJesResult> DriverNYX101AlignAddPoint([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Save alignment process on mount's storage.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Align/Store")]
        Task<AlignStoreMessageDriverMessageRJesResult> DriverNYX101AlignStore([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get mount mode</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Mode")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX101Mode([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount mode to AltAz</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Mode/AltAz")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX101ModeAltAz([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount mode to Equatorial</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Mode/Equatorial")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX101ModeEquatorial([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current hotspot configuration</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Hotspot")]
        Task<HotspotMessageDriverMessageRJesResult> DriverNYX101Hotspot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Hotspot status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Hotspot/Status")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX101HotspotStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Hotspot/On")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX101HotspotOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/Hotspot/Off")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX101HotspotOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Hotspot SSID and password</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Hotspot/SSID/{ssid}/Password/{password}")]
        Task<HotspotMessageDriverMessageRJesResult> DriverNYX101HotspotSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current wifi connection info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Wifi")]
        Task<WifiStatusMessageDriverMessageRJesResult> DriverNYX101Wifi([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Scan for available wifi networks</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Wifi/Scan")]
        Task<AvailableWifiNetworksMessageDriverMessageRJesResult> DriverNYX101WifiScan([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Connect to wifi</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Wifi/Connect/SSID/{ssid}/Password/{password}")]
        Task<WifiInfoMessageDriverMessageRJesResult> DriverNYX101WifiConnectSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Wifi factory reset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Wifi/FactoryReset")]
        Task<EmptyMessageDriverMessageRJesResult> DriverNYX101WifiFactoryReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi transmission power 1~5</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Wifi/Power/{value}")]
        Task<WifiTransmissionPowerMessageDriverMessageRJesResult> DriverNYX101WifiPowerPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi transmission power.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Wifi/Power")]
        Task<WifiTransmissionPowerMessageDriverMessageRJesResult> DriverNYX101WifiPowerGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi channel 1~11</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX101/Wifi/Channel/{value}")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverNYX101WifiChannelPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi channel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Wifi/Channel")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverNYX101WifiChannelGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get input voltage</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/Voltage")]
        Task<VoltageMessageDriverMessageRJesResult> DriverNYX101Voltage([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get auto meridian flip state.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX101/AutoMeridianFlip")]
        Task<VoltageMessageDriverMessageRJesResult> DriverNYX101AutoMeridianFlip([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set AutoMeridianFlip on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/AutoMeridianFlip/On")]
        Task<AutoMeridianFlipMessageDriverMessageRJesResult> DriverNYX101AutoMeridianFlipOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set AutoMeridianFlip off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX101/AutoMeridianFlip/Off")]
        Task<AutoMeridianFlipMessageDriverMessageRJesResult> DriverNYX101AutoMeridianFlipOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverNYX88Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/NYX88/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverNYX88Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/NYX88/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverNYX88Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverNYX88Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverNYX88FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Reboot")]
        Task DriverNYX88Reboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Communication Channel info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Channel/Info")]
        Task<ChannelStatusMessageDriverMessageRJesResult> DriverNYX88ChannelInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Right Ascension</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/RightAscension")]
        Task<RightAscensionMessageDriverMessageRJesResult> DriverNYX88RightAscension([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Declination</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Declination")]
        Task<DeclinationMessageDriverMessageRJesResult> DriverNYX88Declination([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Azimuth</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Azimuth")]
        Task<AzimuthMessageDriverMessageRJesResult> DriverNYX88Azimuth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Altitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Altitude")]
        Task<AltitudeMessageDriverMessageRJesResult> DriverNYX88Altitude([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Sidereal Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/SiderealTime")]
        Task<SiderealTimeMessageDriverMessageRJesResult> DriverNYX88SiderealTime([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Home Position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HomeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Home at current mount position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HomePost([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Go to home position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/GoTo/Home")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88GoToHome([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Celestial Coordinates of Park</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88ParkGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Park at current mount position</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88ParkPost([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo Park</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/GoTo/Park")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88GoToPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>UnPark</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/UnPark")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88UnPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get GuideRate</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/GuideRate")]
        Task<GuideRateMessageDriverMessageRJesResult> DriverNYX88GuideRateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set GuideRate</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/GuideRate/{rate}")]
        Task<GuideRateMessageDriverMessageRJesResult> DriverNYX88GuideRatePut(string rate, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Pulse/North/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX88PulseNorth(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Pulse/South/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX88PulseSouth(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Pulse/East/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX88PulseEast(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Push a pulse to West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Pulse/West/{value}")]
        Task<PulseMessageDriverMessageRJesResult> DriverNYX88PulseWest(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync point passing Ra/Dec values</summary>
        /// <param name="rA">Passing one of the following formats: 12h20m30s or 12:20:30 or 12*20:30 or 12|20|30</param>
        /// <param name="dEC">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Sync/{RA}/{DEC}")]
        Task<EquatorialCoordinatesMessageDriverMessageRJesResult> DriverNYX88Sync([AliasAs("RA")] string rA, [AliasAs("DEC")] string dEC, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Elevation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Elevation")]
        Task<ElevationMessageDriverMessageRJesResult> DriverNYX88ElevationGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Elevation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Elevation/{meters}")]
        Task<ElevationMessageDriverMessageRJesResult> DriverNYX88ElevationPut(int meters, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo AltAz</summary>
        /// <param name="aLT">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="aZ">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/GoTo/Alt/{ALT}/Az/{AZ}")]
        Task<HorizontalCoordinatesMessageDriverMessageRJesResult> DriverNYX88GoToAltAz([AliasAs("ALT")] string aLT, [AliasAs("AZ")] string aZ, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>GoTo  Ra/Dec</summary>
        /// <param name="rA">Passing one of the following formats: 12h20m30s or 12:20:30 or 12*20:30 or 12|20|30</param>
        /// <param name="dEC">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/GoTo/Ra/{RA}/Dec/{DEC}")]
        Task<EquatorialCoordinatesMessageDriverMessageRJesResult> DriverNYX88GoToRaDec([AliasAs("RA")] string rA, [AliasAs("DEC")] string dEC, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get mount move speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/MoveSpeed")]
        Task<MoveSpeedRateStatusMessageDriverMessageRJesResult> DriverNYX88MoveSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/MoveSpeed/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX88MoveSpeedPost(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Ra mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/MoveSpeed/RA/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX88MoveSpeedRA(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec mount move speed.</summary>
        /// <param name="degreesPerSecond">Degrees per second: 0.03 ~ 5.00</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/MoveSpeed/DEC/{degreesPerSecond}")]
        Task<MoveSpeedRateMessageDriverMessageRJesResult> DriverNYX88MoveSpeedDEC(string degreesPerSecond, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Move/North")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX88MoveNorth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Move/South")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX88MoveSouth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Move/East")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX88MoveEast([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move mount West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Move/West")]
        Task<MovingDirectionMessageDriverMessageRJesResult> DriverNYX88MoveWest([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move spiral search at current guiding rate.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Move/Spiral")]
        Task<MoveSpiralMessageDriverMessageRJesResult> DriverNYX88MoveSpiral([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Halt")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88Halt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt East</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Halt/East")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HaltEast([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt West</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Halt/West")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HaltWest([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt North</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Halt/North")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HaltNorth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Halt South</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Halt/South")]
        Task<CelestialCoordinatesMessageDriverMessageRJesResult> DriverNYX88HaltSouth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Sidereal</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/Sidereal")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX88TrackingSidereal([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Lunar</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/Lunar")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX88TrackingLunar([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to Solar</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/Solar")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX88TrackingSolar([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking rate to King</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/King")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX88TrackingKing([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/On")]
        Task<TrackingStatusMessageDriverMessageRJesResult> DriverNYX88TrackingOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set tracking off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Tracking/Off")]
        Task<TrackingRateMessageDriverMessageRJesResult> DriverNYX88TrackingOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Refraction Compensation on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/RefractionCompensation/On")]
        Task<RefractionCompensationMessageDriverMessageRJesResult> DriverNYX88RefractionCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/TrackingRate/Offset/DEC/{value}")]
        Task<DECTrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX88TrackingRateOffsetDEC(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Dec tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/TrackingRate/DEC/Offset")]
        Task<DECTrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX88TrackingRateDECOffset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set RA tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/TrackingRate/RA/Offset/{value}")]
        Task<RATrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX88TrackingRateRAOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get RA tracking rate offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/TrackingRate/RA/Offset")]
        Task<RATrackingRateOffsetMessageDriverMessageRJesResult> DriverNYX88TrackingRateRAOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Refraction Compensation off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/RefractionCompensation/Off")]
        Task<RefractionCompensationMessageDriverMessageRJesResult> DriverNYX88RefractionCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Date</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Date")]
        Task<DateMessageDriverMessageRJesResult> DriverNYX88DateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Date</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Date/{month}/{day}/{year}")]
        Task<DateMessageDriverMessageRJesResult> DriverNYX88DatePost(int month, int day, int year, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Time")]
        Task<TimeMessageDriverMessageRJesResult> DriverNYX88TimeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Time</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Time/{hour}/{minute}/{second}")]
        Task<TimeMessageDriverMessageRJesResult> DriverNYX88TimePost(int hour, int minute, int second, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get UTC Offset without daylight savings.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/UTCOffset")]
        Task<UTCOffsetMessageDriverMessageRJesResult> DriverNYX88UTCOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set UTC Offset without daylight savings.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/UTCOffset/{offset}")]
        Task<UTCOffsetMessageDriverMessageRJesResult> DriverNYX88UTCOffsetPost(string offset, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Latitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Latitude")]
        Task<LatitudeMessageDriverMessageRJesResult> DriverNYX88LatitudeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set latitude</summary>
        /// <param name="lat">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Latitude/{lat}")]
        Task<LatitudeMessageDriverMessageRJesResult> DriverNYX88LatitudePost(string lat, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Longitude</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Longitude")]
        Task<LongitudeMessageDriverMessageRJesResult> DriverNYX88LongitudeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Longitude</summary>
        /// <param name="lon">Passing one of the following formats: 50°10′30″ or 50:10:30 or 50*10:30 or 50|10|30</param>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Longitude/{lon}")]
        Task<LongitudeMessageDriverMessageRJesResult> DriverNYX88LongitudePost(string lon, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Swap pier side.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/SwapPier")]
        Task<PierDirectionMessageDriverMessageRJesResult> DriverNYX88SwapPier([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get slew rate in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/SlewRate")]
        Task<SlewRateDegreeMessageDriverMessageRJesResult> DriverNYX88SlewRateGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set slew rate preset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/SlewRate/{rate}")]
        Task<SlewRateMessageDriverMessageRJesResult> DriverNYX88SlewRatePut(int rate, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Meridian limit in minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Limit/Meridian")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX88LimitMeridian([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Meridian limit for East and West in minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Limit/Meridian/East/{east}/West/{west}")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX88LimitMeridianEastWest(int east, int west, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Elevation limit in degrees.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Limit/Elevation")]
        Task<ElevationLimitMessageDriverMessageRJesResult> DriverNYX88LimitElevation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Elevation in degrees for Lower Limit(above or below horizon acceptable values -30 ~ 30) and Higher Limit(overhead acceptable values 60 - 90)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Limit/Elevation/Lower/{lower}/Higher/{higher}")]
        Task<MeridianLimitMessageDriverMessageRJesResult> DriverNYX88LimitElevationLowerHigher(int lower, int higher, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Backlash/Dec")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX88BacklashDecGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Backlash/Dec/{value}")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX88BacklashDecPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get RA backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Backlash/RA")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX88BacklashRAGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dec backlash</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Backlash/RA/{value}")]
        Task<BacklashMessageDriverMessageRJesResult> DriverNYX88BacklashRAPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Iniate Align passing the length of stars.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Align/Initiate/{stars}")]
        Task<AlignInitiatorMessageDriverMessageRJesResult> DriverNYX88AlignInitiate(int stars, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Add mount's current position as alignment point.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Align/AddPoint")]
        Task<AlignPointMessageDriverMessageRJesResult> DriverNYX88AlignAddPoint([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Save alignment process on mount's storage.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Align/Store")]
        Task<AlignStoreMessageDriverMessageRJesResult> DriverNYX88AlignStore([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get mount mode</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Mode")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX88Mode([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount mode to AltAz</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Mode/AltAz")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX88ModeAltAz([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set mount mode to Equatorial</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Mode/Equatorial")]
        Task<MountModeMessageDriverMessageRJesResult> DriverNYX88ModeEquatorial([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current hotspot configuration</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Hotspot")]
        Task<HotspotMessageDriverMessageRJesResult> DriverNYX88Hotspot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Hotspot status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Hotspot/Status")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX88HotspotStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Hotspot/On")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX88HotspotOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/Hotspot/Off")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverNYX88HotspotOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Hotspot SSID and password</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Hotspot/SSID/{ssid}/Password/{password}")]
        Task<HotspotMessageDriverMessageRJesResult> DriverNYX88HotspotSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current wifi connection info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Wifi")]
        Task<WifiStatusMessageDriverMessageRJesResult> DriverNYX88Wifi([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Scan for available wifi networks</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Wifi/Scan")]
        Task<AvailableWifiNetworksMessageDriverMessageRJesResult> DriverNYX88WifiScan([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Connect to wifi</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Wifi/Connect/SSID/{ssid}/Password/{password}")]
        Task<WifiInfoMessageDriverMessageRJesResult> DriverNYX88WifiConnectSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Wifi factory reset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Wifi/FactoryReset")]
        Task<EmptyMessageDriverMessageRJesResult> DriverNYX88WifiFactoryReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi transmission power 1~5</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Wifi/Power/{value}")]
        Task<WifiTransmissionPowerMessageDriverMessageRJesResult> DriverNYX88WifiPowerPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi transmission power.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Wifi/Power")]
        Task<WifiTransmissionPowerMessageDriverMessageRJesResult> DriverNYX88WifiPowerGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi channel 1~11</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/NYX88/Wifi/Channel/{value}")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverNYX88WifiChannelPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi channel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Wifi/Channel")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverNYX88WifiChannelGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get input voltage</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/Voltage")]
        Task<VoltageMessageDriverMessageRJesResult> DriverNYX88Voltage([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get auto meridian flip state.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/NYX88/AutoMeridianFlip")]
        Task<VoltageMessageDriverMessageRJesResult> DriverNYX88AutoMeridianFlip([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set AutoMeridianFlip on</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/AutoMeridianFlip/On")]
        Task<AutoMeridianFlipMessageDriverMessageRJesResult> DriverNYX88AutoMeridianFlipOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set AutoMeridianFlip off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/NYX88/AutoMeridianFlip/Off")]
        Task<AutoMeridianFlipMessageDriverMessageRJesResult> DriverNYX88AutoMeridianFlipOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverPPBPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPB/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPB/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverPPBActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverPPBFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Reboot")]
        Task DriverPPBReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Power/Hub/Status")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBPowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Power/Hub/On")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBPowerHubOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Power/Hub/Off")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBPowerHubOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DSLR output state.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Power/DSLR")]
        Task<PowerDSLRPortSwitchStateMessageDriverMessageRJesResult> DriverPPBPowerDSLR([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on DSLR.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Power/DSLR/On")]
        Task<PowerDSLRPortSwitchStateMessageDriverMessageRJesResult> DriverPPBPowerDSLROn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off DSLR.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Power/DSLR/Off")]
        Task<PowerDSLRPortSwitchStateMessageDriverMessageRJesResult> DriverPPBPowerDSLROff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~2 at maximum value.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Dew/{portNumber}/On/Max")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBDewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Dew/{portNumber}/{dewPower}")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBDew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPB/Dew/{portNumber}/Off")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBDewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Dew/Auto")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBDewAuto([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPB/Dew/Auto/On")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBDewAutoOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPB/Dew/Auto/Off")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBDewAutoOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Dew/Auto/Aggressiveness")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBDewAutoAggressivenessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPB/Dew/Auto/Aggressiveness/{level}")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBDewAutoAggressivenessPost(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Dew/Hub/Status")]
        Task<DewHubStatusPPBMessageDriverMessageRJesResult> DriverPPBDewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPB/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPB/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Report/Power")]
        Task<PowerReportMessageDriverMessageRJesResult> DriverPPBReportPower([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Consumption Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Report/PowerConsumption")]
        Task<PowerConsumptionReportMessageDriverMessageRJesResult> DriverPPBReportPowerConsumption([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Environment Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Report/Environment")]
        Task<EnvironmentReportMessageDriverMessageRJesResult> DriverPPBReportEnvironment([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a comprehensive report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPB/Report")]
        Task<AggregateReportPPBMessageDriverMessageRJesResult> DriverPPBReport([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverPPBAdvancePerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPBAdvance/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBAdvanceStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPBAdvance/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBAdvanceStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverPPBAdvanceActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverPPBAdvanceFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Reboot")]
        Task DriverPPBAdvanceReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reset the I2C Protocol</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Recycle")]
        Task DriverPPBAdvanceRecycle([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Power/Hub/Bootstrap")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Power/Hub/Bootstrap/On")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Power/Hub/Bootstrap/Off")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Power/Variable/Bootstrap")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Power/Variable/Bootstrap/On")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Power/Variable/Bootstrap/Off")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Power/Hub/Status")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Power/Hub/On")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Power/Hub/Off")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBAdvancePowerHubOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get variable output voltage</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Power/Variable")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Power/Variable/On")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Power/Variable/Off")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariableOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set variable output voltage to 3,5,8,9,12 volt</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Power/Variable/{voltage}")]
        Task<PowerVariablePortStateMessageDriverMessageRJesResult> DriverPPBAdvancePowerVariablePost(int voltage, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~2 at maximum value.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Dew/{portNumber}/On/Max")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Dew/{portNumber}/{dewPower}")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBAdvanceDew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Dew/{portNumber}/Off")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Dew/Auto")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewAuto([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Dew/Auto/On")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewAutoOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Dew/Auto/Off")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewAutoOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Dew/Auto/Aggressiveness")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewAutoAggressivenessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Dew/Auto/Aggressiveness/{level}")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewAutoAggressivenessPost(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Dew/Hub/Status")]
        Task<DewHubStatusPPBMessageDriverMessageRJesResult> DriverPPBAdvanceDewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBAdvanceLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBAdvanceLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Report/Power")]
        Task<PowerReportMessageDriverMessageRJesResult> DriverPPBAdvanceReportPower([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Consumption Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Report/PowerConsumption")]
        Task<PowerConsumptionReportMessageDriverMessageRJesResult> DriverPPBAdvanceReportPowerConsumption([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Environment Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Report/Environment")]
        Task<EnvironmentReportMessageDriverMessageRJesResult> DriverPPBAdvanceReportEnvironment([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a comprehensive report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Report")]
        Task<AggregateReportPPBMessageDriverMessageRJesResult> DriverPPBAdvanceReport([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Temperature/Offset")]
        Task DriverPPBAdvanceTemperatureOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Temperature/Offset/{value}")]
        Task DriverPPBAdvanceTemperatureOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Humidity/Offset")]
        Task DriverPPBAdvanceHumidityOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBAdvance/Humidity/Offset/{value}")]
        Task DriverPPBAdvanceHumidityOffsetPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for dew hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBAdvance/Dew/Hub/Bootstrap")]
        Task<DewBootstrapStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewHubBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for dew hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Dew/Hub/Bootstrap/On")]
        Task<DewBootstrapStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewHubBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for dew hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBAdvance/Dew/Hub/Bootstrap/Off")]
        Task<DewBootstrapStateMessageDriverMessageRJesResult> DriverPPBAdvanceDewHubBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverPPBMicroPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPBMicro/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBMicroStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/PPBMicro/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverPPBMicroStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverPPBMicroActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverPPBMicroFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Reboot")]
        Task DriverPPBMicroReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reset the I2C Protocol</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Recycle")]
        Task DriverPPBMicroRecycle([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Power/Hub/Bootstrap")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerHubBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Power/Hub/Bootstrap/On")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerHubBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Power/Hub/Bootstrap/Off")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerHubBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Power/Variable/Bootstrap")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Power/Variable/Bootstrap/On")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Power/Variable/Bootstrap/Off")]
        Task<PowerVariableBootstrapMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Power/Hub/Status")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBMicroPowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Power/Hub/On")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBMicroPowerHubOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Power/Hub/Off")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverPPBMicroPowerHubOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get variable output voltage</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Power/Variable")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Power/Variable/On")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off variable port.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Power/Variable/Off")]
        Task<PowerVariablePortSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroPowerVariableOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set variable output voltage to 3,5,8,9,12 volt</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Power/Variable/{voltage}")]
        Task<PowerVariablePortStateMessageDriverMessageRJesResult> DriverPPBMicroPowerVariablePost(int voltage, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~2 at maximum value.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Dew/{portNumber}/On/Max")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBMicroDewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Dew/{portNumber}/{dewPower}")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBMicroDew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/PPBMicro/Dew/{portNumber}/Off")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverPPBMicroDewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Dew/Auto")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroDewAuto([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Dew/Auto/On")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroDewAutoOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Dew/Auto/Off")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverPPBMicroDewAutoOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Dew/Auto/Aggressiveness")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBMicroDewAutoAggressivenessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Dew/Auto/Aggressiveness/{level}")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverPPBMicroDewAutoAggressivenessPost(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Dew/Hub/Status")]
        Task<DewHubStatusPPBMessageDriverMessageRJesResult> DriverPPBMicroDewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBMicroLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/PPBMicro/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverPPBMicroLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Report/Power")]
        Task<PowerReportMessageDriverMessageRJesResult> DriverPPBMicroReportPower([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Consumption Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Report/PowerConsumption")]
        Task<PowerConsumptionReportMessageDriverMessageRJesResult> DriverPPBMicroReportPowerConsumption([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Environment Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Report/Environment")]
        Task<EnvironmentReportMessageDriverMessageRJesResult> DriverPPBMicroReportEnvironment([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a comprehensive report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/PPBMicro/Report")]
        Task<AggregateReportPPBMessageDriverMessageRJesResult> DriverPPBMicroReport([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverProdigyMFPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/ProdigyMF/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverProdigyMFStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/ProdigyMF/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverProdigyMFStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverProdigyMFActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverProdigyMFFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverProdigyMFMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverProdigyMFMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverProdigyMFMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverProdigyMFMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverProdigyMFMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverProdigyMFMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverProdigyMFMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverProdigyMFMotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverProdigyMFMotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverProdigyMFMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverProdigyMFMotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverProdigyMFMotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Park motor at position 0.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Motor/Park")]
        Task<ParkMessageDriverMessageRJesResult> DriverProdigyMFMotorPark([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/Power/{portNumber}/On")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverProdigyMFPowerOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off power ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/Power/{portNumber}/Off")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverProdigyMFPowerOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Power/Hub/Status")]
        Task<ProdigyMFPowerHubStatusMessageDriverMessageRJesResult> DriverProdigyMFPowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on usb ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/USB/{portNumber}/On")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverProdigyMFUSBOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off usb ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ProdigyMF/USB/{portNumber}/Off")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverProdigyMFUSBOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get USBHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/USB/Hub/Status")]
        Task<USBHubStatusMessageDriverMessageRJesResult> DriverProdigyMFUSBHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ProdigyMF/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ProdigyMF/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverProdigyMFEnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverSaddlePowerBoxPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/SaddlePowerBox/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/SaddlePowerBox/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverSaddlePowerBoxFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Reboot")]
        Task DriverSaddlePowerBoxReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Power/Hub/Bootstrap")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Power/Hub/Bootstrap/On")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off startup(boot) state for power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Power/Hub/Bootstrap/Off")]
        Task<PowerHubBootstrapMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Power/Hub/Status")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Power/Hub/On")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power hub.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Power/Hub/Off")]
        Task<PowerHubStatusPPBMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerHubOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get status of power port 1~2. AdjustablePortMode required to set Switch.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Power/{portnumber}/Status")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerStatus(int portnumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch ON power port 1~2. AdjustablePortMode required to set Switch.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Power/{portnumber}/On")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerOn(int portnumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch OFF power port 1~2. AdjustablePortMode required to set Switch.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Power/{portnumber}/Off")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxPowerOff(int portnumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the mode of the Adjustable ports (1,2) Switch or DewPort</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Adjustable/{portNumber}/Mode")]
        Task<AdjustablePortModeMessageDriverMessageRJesResult> DriverSaddlePowerBoxAdjustableMode(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Change the mode of the Adjustable ports (1,2)  to behave as DewPort.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Adjustable/{portNumber}/Mode/Dew")]
        Task<AdjustablePortModeMessageDriverMessageRJesResult> DriverSaddlePowerBoxAdjustableModeDew(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Change the mode of the Adjustable ports (1,2) to behave as switch port of 12v.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Adjustable/{portNumber}/Mode/Switch")]
        Task<AdjustablePortModeMessageDriverMessageRJesResult> DriverSaddlePowerBoxAdjustableModeSwitch(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~2 at maximum.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Dew/{portNumber}/On/Max")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Dew/{portNumber}/{dewPower}")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~2.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Dew/{portNumber}/Off")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Dew/Auto")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewAuto([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Dew/Auto/On")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewAutoOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew .</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Dew/Auto/Off")]
        Task<DewAutoSwitchStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewAutoOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Dew/Auto/Aggressiveness")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewAutoAggressivenessGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Aggressiveness Level for AUTO dew.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Dew/Auto/Aggressiveness/{level}")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewAutoAggressivenessPost(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Dew/Hub/Status")]
        Task<DewHubStatusPPBMessageDriverMessageRJesResult> DriverSaddlePowerBoxDewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/SaddlePowerBox/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverSaddlePowerBoxLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Report/Power")]
        Task<PowerReportMessageDriverMessageRJesResult> DriverSaddlePowerBoxReportPower([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Consumption Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Report/PowerConsumption")]
        Task<PowerConsumptionReportMessageDriverMessageRJesResult> DriverSaddlePowerBoxReportPowerConsumption([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Environment Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Report/Environment")]
        Task<EnvironmentReportMessageDriverMessageRJesResult> DriverSaddlePowerBoxReportEnvironment([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a comprehensive report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Report")]
        Task<AggregateReportPPBMessageDriverMessageRJesResult> DriverSaddlePowerBoxReport([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Temperature/Offset")]
        Task DriverSaddlePowerBoxTemperatureOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Temperature/Offset/{value}")]
        Task DriverSaddlePowerBoxTemperatureOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/SaddlePowerBox/Humidity/Offset")]
        Task DriverSaddlePowerBoxHumidityOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/SaddlePowerBox/Humidity/Offset/{value}")]
        Task DriverSaddlePowerBoxHumidityOffsetPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverScopsOAGPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/ScopsOAG/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverScopsOAGStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/ScopsOAG/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverScopsOAGStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverScopsOAGActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverScopsOAGFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverScopsOAGMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ScopsOAG/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverScopsOAGMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverScopsOAGMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ScopsOAG/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverScopsOAGMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ScopsOAG/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverScopsOAGMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/ScopsOAG/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverScopsOAGMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverScopsOAGMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ScopsOAG/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverScopsOAGMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Led state</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/ScopsOAG/Led")]
        Task<LedStateMessageDriverMessageRJesResult> DriverScopsOAGLed([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>On Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ScopsOAG/Led/On")]
        Task<LedStateMessageDriverMessageRJesResult> DriverScopsOAGLedOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Off Led.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/ScopsOAG/Led/Off")]
        Task<LedStateMessageDriverMessageRJesResult> DriverScopsOAGLedOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverUPBv2Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/UPBv2/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUPBv2Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/UPBv2/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUPBv2Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverUPBv2Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverUPBv2FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Reboot")]
        Task DriverUPBv2Reboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Communication Channel info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Channel/Info")]
        Task<ChannelStatusMessageDriverMessageRJesResult> DriverUPBv2ChannelInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reset the I2C Protocol</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Recycle")]
        Task DriverUPBv2Recycle([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on power ports 1~4.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Power/{portNumber}/On")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverUPBv2PowerOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off power ports 1~4.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Power/{portNumber}/Off")]
        Task<PowerPortStateMessageDriverMessageRJesResult> DriverUPBv2PowerOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Power/Hub/Status")]
        Task<PowerHubStatusMessageDriverMessageRJesResult> DriverUPBv2PowerHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on power ports 1~4 at startup time (boot)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Power/{portNumber}/Bootstrap/On")]
        Task<PowerBootstrapPortStateMessageDriverMessageRJesResult> DriverUPBv2PowerBootstrapOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off power ports 1~4 at startup time (boot).</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Power/{portNumber}/Bootstrap/Off")]
        Task<PowerBootstrapPortStateMessageDriverMessageRJesResult> DriverUPBv2PowerBootstrapOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set variable output voltage 3~12</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Power/Variable/{voltage}")]
        Task<PowerVariablePortStateMessageDriverMessageRJesResult> DriverUPBv2PowerVariable(int voltage, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) values for power ports.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Power/Bootstrap")]
        Task<PowerBootstrapMessageDriverMessageRJesResult> DriverUPBv2PowerBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Dew/Hub/Status")]
        Task<DewHubStatusMessageDriverMessageRJesResult> DriverUPBv2DewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~3 at maximum value.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Dew/{portNumber}/On/Max")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverUPBv2DewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~3.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Dew/{portNumber}/{dewPower}")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverUPBv2Dew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~3.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Dew/{portNumber}/Off")]
        Task<DewPortStateMessageDriverMessageRJesResult> DriverUPBv2DewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Auto dew based on a profile schema.</summary>
        /// <remarks>
        /// Profiles:
        /// 
        /// 0.Disable Auto Dew
        /// 
        /// 1.Enable all ports 1~3
        /// 
        /// 2.Enable only port 1
        /// 
        /// 3.Enable only port 2
        /// 
        /// 4.Enable only port 3
        /// 
        /// 5.Enable ports 1 and 2
        /// 
        /// 6.Enable ports 1 and 3
        /// 
        /// 7.Enable ports 2 and 3
        /// </remarks>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Dew/Auto/{profileNumber}")]
        Task<DewAutoProfileStateMessageDriverMessageRJesResult> DriverUPBv2DewAutoPost(int profileNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Auto dew profile.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Dew/Auto")]
        Task<DewAutoProfileStateMessageDriverMessageRJesResult> DriverUPBv2DewAutoGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Aggressiveness Level for AUTO dew profiles.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Dew/Auto/Aggressiveness/{level}")]
        Task<DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult> DriverUPBv2DewAutoAggressiveness(int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/USB/{portNumber}/On")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverUPBv2USBOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/USB/{portNumber}/Off")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverUPBv2USBOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get USBHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/USB/Hub/Status")]
        Task<USBHubStatusMessageDriverMessageRJesResult> DriverUPBv2USBHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on usb ports 1~6 at startup time (boot)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/USB/{portNumber}/Bootstrap/On")]
        Task<USBBootstrapPortStateMessageDriverMessageRJesResult> DriverUPBv2USBBootstrapOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off usb ports 1~6 at startup time (boot).</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/USB/{portNumber}/Bootstrap/Off")]
        Task<USBBootstrapPortStateMessageDriverMessageRJesResult> DriverUPBv2USBBootstrapOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) values for usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/USB/Bootstrap")]
        Task<USBBootstrapMessageDriverMessageRJesResult> DriverUPBv2USBBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverUPBv2MotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverUPBv2MotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverUPBv2MotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverUPBv2MotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverUPBv2MotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv2/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverUPBv2MotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverUPBv2MotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverUPBv2MotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverUPBv2MotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv2MotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv2MotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv2MotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverUPBv2MotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverUPBv2MotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverUPBv2MotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Status of motor acceleration.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Motor/Acceleration")]
        Task<MotorAccelerationStateMessageDriverMessageRJesResult> DriverUPBv2MotorAcceleration([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable motor acceleration.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Acceleration/On")]
        Task<MotorAccelerationStateMessageDriverMessageRJesResult> DriverUPBv2MotorAccelerationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable motor acceleration.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Motor/Acceleration/Off")]
        Task<MotorAccelerationStateMessageDriverMessageRJesResult> DriverUPBv2MotorAccelerationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Report/Power")]
        Task<PowerReportMessageDriverMessageRJesResult> DriverUPBv2ReportPower([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Power Consumption Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Report/PowerConsumption")]
        Task<PowerConsumptionReportMessageDriverMessageRJesResult> DriverUPBv2ReportPowerConsumption([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a Environment Report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Report/Environment")]
        Task<EnvironmentReportMessageDriverMessageRJesResult> DriverUPBv2ReportEnvironment([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get a comprehensive report of the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Report")]
        Task<AggregateReportMessageDriverMessageRJesResult> DriverUPBv2Report([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv2/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv2/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv2EnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverUPBv3Performance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/UPBv3/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUPBv3Start([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/UPBv3/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUPBv3Stop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverUPBv3Active([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverUPBv3FirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Reboot")]
        Task DriverUPBv3Reboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Communication Channel info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Channel/Info")]
        Task<ChannelStatusMessageDriverMessageRJesResult> DriverUPBv3ChannelInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reset the I2C Protocol</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Recycle")]
        Task DriverUPBv3Recycle([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get PowerHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/PWM/Hub/Status")]
        Task<PWMHubMessageDriverMessageRJesResult> DriverUPBv3PWMHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set custom PWM port level (1~100) of ports 3~6 (Ports 1 and 2 does not support custom level)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/{level}")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWM(int portNumber, int level, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch (On)  the PWM port</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/On")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWMOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch (Off) the PWM port</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/Off")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWMOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set PWM port name to ports 1~6</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/Name/{name}")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWMName(int portNumber, string name, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set PWM port to bootstrap ON</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/Bootstrap/On")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWMBootstrapOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set PWM port to bootstrap OFF</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/PWM/{portNumber}/Bootstrap/Off")]
        Task<PWMPortMessageDriverMessageRJesResult> DriverUPBv3PWMBootstrapOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get DewHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Dew/Hub/Status")]
        Task<DewHubMessageDriverMessageRJesResult> DriverUPBv3DewHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on dew ports 1~3 at maximum value.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/{portNumber}/On/Max")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3DewOnMax(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set dew power value 0~100 ports 1~3.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/{portNumber}/{dewPower}")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3Dew(int portNumber, int dewPower, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off dew ports 1~3.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/{portNumber}/Off")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3DewOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dew Auto to On for ports 1~3</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/Auto/{portNumber}/On")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3DewAutoOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dew Auto to Off for ports 1~3</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/Auto/{portNumber}/Off")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3DewAutoOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dew Auto Aggressiveness level 1~10</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Dew/Auto/{aggressiveness}")]
        Task<DewAutoAggressivenessLevelMessageDriverMessageRJesResult> DriverUPBv3DewAuto(int aggressiveness, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Dew port name to ports 1~3</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Dew/{portNumber}/Name/{name}")]
        Task<DewPortMessageDriverMessageRJesResult> DriverUPBv3DewName(int portNumber, string name, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get USBHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/USB/Hub/Status")]
        Task<USBHubMessageDriverMessageRJesResult> DriverUPBv3USBHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/USB/{portNumber}/On")]
        Task<USBPortMessageDriverMessageRJesResult> DriverUPBv3USBOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/USB/{portNumber}/Off")]
        Task<USBPortMessageDriverMessageRJesResult> DriverUPBv3USBOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set USB port name to ports 1~8</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/USB/{portNumber}/Name/{name}")]
        Task<USBPortMessageDriverMessageRJesResult> DriverUPBv3USBName(int portNumber, string name, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set USB port to bootstrap ON</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/USB/{portNumber}/Bootstrap/On")]
        Task<USBPortMessageDriverMessageRJesResult> DriverUPBv3USBBootstrapOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set USB port to bootstrap OFF</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/USB/{portNumber}/Bootstrap/Off")]
        Task<USBPortMessageDriverMessageRJesResult> DriverUPBv3USBBootstrapOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get adjustable Buck(3~12v) status</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Adjustable/Buck")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuck([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch On adjustable Buck(3~12v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Buck/On")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuckOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch Off adjustable Buck(3~12v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Buck/Off")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuckOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Swithc Off adjustable Buck(3~12v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Buck/Voltage/{voltage}")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuckVoltage(int voltage, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Adjustable Buck port to bootstrap ON</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Buck/Bootstrap/On")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuckBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Adjustable port Buck to bootstrap OFF</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Buck/Bootstrap/Off")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBuckBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get adjustable Boost(12~24v) status</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Adjustable/Boost")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoost([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch On adjustable Boost(12~24v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Boost/On")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoostOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch Off adjustable Boost(12~24v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Boost/Off")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoostOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Swithc Off adjustable Boost(12~24v)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Boost/Voltage/{voltage}")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoostVoltage(int voltage, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Adjustable Boost port to bootstrap ON</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Boost/Bootstrap/On")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoostBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Adjustable Boost port to bootstrap OFF</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Adjustable/Boost/Bootstrap/Off")]
        Task<AdjustablePortMessageDriverMessageRJesResult> DriverUPBv3AdjustableBoostBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Relay  status</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Relay")]
        Task<RelayPortMessageDriverMessageRJesResult> DriverUPBv3Relay([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch On Relay</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Relay/On")]
        Task<RelayPortMessageDriverMessageRJesResult> DriverUPBv3RelayOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch Off Relay</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Relay/Off")]
        Task<RelayPortMessageDriverMessageRJesResult> DriverUPBv3RelayOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Relay port to bootstrap ON</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Relay/Bootstrap/On")]
        Task<RelayPortMessageDriverMessageRJesResult> DriverUPBv3RelayBootstrapOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Relay port to bootstrap OFF</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Relay/Bootstrap/Off")]
        Task<RelayPortMessageDriverMessageRJesResult> DriverUPBv3RelayBootstrapOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverUPBv3MotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverUPBv3MotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverUPBv3MotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverUPBv3MotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverUPBv3MotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverUPBv3MotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverUPBv3MotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv3MotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv3MotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverUPBv3MotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverUPBv3MotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverUPBv3MotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverUPBv3MotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor Current (mA).</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Current")]
        Task<MotorCurrentMessageDriverMessageRJesResult> DriverUPBv3MotorCurrentGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the motor current.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Current/{mA}")]
        Task<MotorCurrentMessageDriverMessageRJesResult> DriverUPBv3MotorCurrentPost(int mA, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor microstepping ratio.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Motor/Microstep")]
        Task<MotorMicrostepRatioMessageDriverMessageRJesResult> DriverUPBv3MotorMicrostepGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the motor microstepping.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Motor/Microstep/{ratio}")]
        Task<MotorMicrostepRatioMessageDriverMessageRJesResult> DriverUPBv3MotorMicrostepPost(int ratio, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current hotspot configuration</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Hotspot")]
        Task<HotspotMessageDriverMessageRJesResult> DriverUPBv3Hotspot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Hotspot status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Hotspot/Status")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverUPBv3HotspotStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Hotspot/On")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverUPBv3HotspotOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Hotspot.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Hotspot/Off")]
        Task<HotspotStatusMessageDriverMessageRJesResult> DriverUPBv3HotspotOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Hotspot SSID and password</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Hotspot/SSID/{ssid}/Password/{password}")]
        Task<HotspotMessageDriverMessageRJesResult> DriverUPBv3HotspotSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get current wifi connection info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Wifi")]
        Task<WifiStatusMessageDriverMessageRJesResult> DriverUPBv3Wifi([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Scan for available wifi networks</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Wifi/Scan")]
        Task<AvailableWifiNetworksMessageDriverMessageRJesResult> DriverUPBv3WifiScan([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Connect to wifi</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Wifi/Connect/SSID/{ssid}/Password/{password}")]
        Task<WifiInfoMessageDriverMessageRJesResult> DriverUPBv3WifiConnectSSIDPassword(string ssid, string password, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Wifi factory reset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Wifi/FactoryReset")]
        Task<EmptyMessageDriverMessageRJesResult> DriverUPBv3WifiFactoryReset([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Wifi channel 1~11</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Wifi/Channel/{value}")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverUPBv3WifiChannelPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Wifi channel.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Wifi/Channel")]
        Task<WifiChannelMessageDriverMessageRJesResult> DriverUPBv3WifiChannelGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Temperature/Offset")]
        Task DriverUPBv3TemperatureOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Temperature/Offset/{value}")]
        Task DriverUPBv3TemperatureOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Humidity/Offset")]
        Task DriverUPBv3HumidityOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/UPBv3/Humidity/Offset/{value}")]
        Task DriverUPBv3HumidityOffsetPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/UPBv3/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/UPBv3/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverUPBv3EnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverUranusPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Uranus/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUranusStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/Uranus/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUranusStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverUranusActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverUranusFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Uranus/Reboot")]
        Task DriverUranusReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Communication Channel info</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Channel/Info")]
        Task<ChannelStatusMessageDriverMessageRJesResult> DriverUranusChannelInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Units to Metric</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/Units/Metric")]
        Task DriverUranusUnitsMetric([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Units to Imperial</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/Units/Imperial")]
        Task DriverUranusUnitsImperial([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Units to Imperial</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Units")]
        Task DriverUranusUnits([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set NMEA output port ON.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/NMEA/On")]
        Task DriverUranusNMEAOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set NMEA output port Off.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/NMEA/Off")]
        Task DriverUranusNMEAOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get NMEA output port state. On/Off</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/NMEA")]
        Task DriverUranusNMEA([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Sleep mode minutes acceptable values 1~30 minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/SleepMode/{minutes}")]
        Task DriverUranusSleepModePost(int minutes, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Sleep mode minutes.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/SleepMode")]
        Task DriverUranusSleepModeGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set SQM offset in microlum, acceptable values -127~127.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/SQMOffset/{microlum}")]
        Task DriverUranusSQMOffsetPost(int microlum, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get SQM offset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/SQMOffset")]
        Task DriverUranusSQMOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set TimeZone UTCOffset hours and minutes. Example:  +13:00, -12:00.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/TimeZone/{utcoffset}")]
        Task DriverUranusTimeZonePost(string utcoffset, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get TimeZone UTCOffset.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/TimeZone")]
        Task DriverUranusTimeZoneGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get  Memmory Storage Info.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Memmory/Info")]
        Task DriverUranusMemmoryInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Clear Memmory Storage.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Uranus/Memmory/Clear")]
        Task DriverUranusMemmoryClear([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Display")]
        Task DriverUranusDisplay([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/Display/On")]
        Task DriverUranusDisplayOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/Display/Off")]
        Task DriverUranusDisplayOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/IRCoefficient")]
        Task DriverUranusIRCoefficientGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/Uranus/IRCoefficient/{value}")]
        Task DriverUranusIRCoefficientPost(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Astronomical/Info")]
        Task DriverUranusAstronomicalInfo([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Temperature/Offset")]
        Task DriverUranusTemperatureOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Temperature Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Uranus/Temperature/Offset/{value}")]
        Task DriverUranusTemperatureOffsetPut(string value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Cloud Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Cloud/Offset")]
        Task DriverUranusCloudOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Cloud Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Uranus/Cloud/Offset/{value}")]
        Task DriverUranusCloudOffsetPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Humidity/Offset")]
        Task DriverUranusHumidityOffsetGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Humidity Offset</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/Uranus/Humidity/Offset/{value}")]
        Task DriverUranusHumidityOffsetPut(int value, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/Report")]
        Task DriverUranusReport([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/Uranus/UserMeasurements")]
        Task DriverUranusUserMeasurements([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverUSBControlHubPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/USBControlHub/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUSBControlHubStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/USBControlHub/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverUSBControlHubStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverUSBControlHubActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get FirmwareVersion</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/Firmware/Version")]
        Task<FirmwareVersionMessageDriverMessageRJesResult> DriverUSBControlHubFirmwareVersion([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Reboot the device.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/USBControlHub/Reboot")]
        Task DriverUSBControlHubReboot([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch on usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/USBControlHub/USB/{portNumber}/On")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverUSBControlHubUSBOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Switch off usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/USBControlHub/USB/{portNumber}/Off")]
        Task<USBPortStateMessageDriverMessageRJesResult> DriverUSBControlHubUSBOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get USBHub Status.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/USB/Hub/Status")]
        Task<USBHubStatusMessageDriverMessageRJesResult> DriverUSBControlHubUSBHubStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set on usb ports 1~6 at startup time (boot)</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/USBControlHub/USB/{portNumber}/Bootstrap/On")]
        Task<USBBootstrapPortStateMessageDriverMessageRJesResult> DriverUSBControlHubUSBBootstrapOn(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set off usb ports 1~6 at startup time (boot).</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/USBControlHub/USB/{portNumber}/Bootstrap/Off")]
        Task<USBBootstrapPortStateMessageDriverMessageRJesResult> DriverUSBControlHubUSBBootstrapOff(int portNumber, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get USB Voltage</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/USB/Voltage")]
        Task<VoltageMessageDriverMessageRJesResult> DriverUSBControlHubUSBVoltage([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get startup(boot) values for usb ports 1~6.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/USBControlHub/USB/Bootstrap")]
        Task<USBBootstrapMessageDriverMessageRJesResult> DriverUSBControlHubUSBBootstrap([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Performance")]
        Task<PerformanceCounterDTOIEnumerableRJesResult> DriverXMCPerformance([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Start the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/XMC/Start")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverXMCStart([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stop the Driver</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Options("/Driver/XMC/Stop")]
        Task<DriverStateMessageDriverMessageRJesResult> DriverXMCStop([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if Device is connected and operates properly.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Active")]
        Task<DeviceConnectionStateMessageDriverMessageRJesResult> DriverXMCActive([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Limits")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverXMCMotorLimitsGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set MotorLimits</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Limits/{Minimum}/{Maximum}/{Enabled}")]
        Task<MotorLimitsMessageDriverMessageRJesResult> DriverXMCMotorLimitsPost([AliasAs("Minimum")] int minimum, [AliasAs("Maximum")] int maximum, [AliasAs("Enabled")] bool enabled, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the current position of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Position")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverXMCMotorPosition([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor absolute.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/XMC/Motor/Move/Absolute/{steps}")]
        Task<MotorMoveAbsoluteMessageDriverMessageRJesResult> DriverXMCMotorMoveAbsolute(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Move motor relative.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/XMC/Motor/Move/Relative/{steps}")]
        Task<MotorMoveRelativeMessageDriverMessageRJesResult> DriverXMCMotorMoveRelative(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Stops immediately the motor movement.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/Driver/XMC/Motor/Halt")]
        Task<MotorCurrentPositionMessageDriverMessageRJesResult> DriverXMCMotorHalt([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Environment Temperature in Celsius.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Environment/Temperature")]
        Task<EnvironmentTemperatureMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperature([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Check if the motor is moving.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Move/Status")]
        Task<MoveStatusMessageDriverMessageRJesResult> DriverXMCMotorMoveStatus([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Backlash")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverXMCMotorBacklashGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor backlash steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Backlash/{steps}")]
        Task<MotorBacklashMessageDriverMessageRJesResult> DriverXMCMotorBacklashPost(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Direction")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverXMCMotorDirection([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Normal-Clockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Direction/Clockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverXMCMotorDirectionClockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set motor direction to Reversed-Anticlockwise.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Direction/Anticlockwise")]
        Task<MovementDirectionMessageDriverMessageRJesResult> DriverXMCMotorDirectionAnticlockwise([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Sync (Change existing motor	position) to steps.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Sync/{steps}")]
        Task<MotorPositionSyncMessageDriverMessageRJesResult> DriverXMCMotorSync(int steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get motor speed.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/Speed")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverXMCMotorSpeedGet([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set the Speed of motor.</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/Speed/{speed}")]
        Task<MotorSpeedMessageDriverMessageRJesResult> DriverXMCMotorSpeedPost(int speed, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get the motor step size. Full, Half, Quarter, Eighth</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Motor/StepSize")]
        Task<MotorStepSizeMessageDriverMessageRJesResult> DriverXMCMotorStepSize([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Motor Step size at Full;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/StepSize/Full")]
        Task<MotorStepSizeMessageDriverMessageRJesResult> DriverXMCMotorStepSizeFull([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Motor Step size at Half;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/StepSize/Half")]
        Task<MotorStepSizeMessageDriverMessageRJesResult> DriverXMCMotorStepSizeHalf([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Motor Step size at Quarter;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/StepSize/Quarter")]
        Task<MotorStepSizeMessageDriverMessageRJesResult> DriverXMCMotorStepSizeQuarter([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set Motor Step size at Eighth;</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Motor/StepSize/Eighth")]
        Task<MotorStepSizeMessageDriverMessageRJesResult> DriverXMCMotorStepSizeEighth([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Get Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Driver/XMC/Environment/Temperature/Compensation")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperatureCompensation([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Enable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Environment/Temperature/Compensation/On")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperatureCompensationOn([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Disable Temperature Compensation</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Environment/Temperature/Compensation/Off")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperatureCompensationOff([Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation threshold</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Environment/Temperature/Compensation/Threshold/{temperature}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperatureCompensationThreshold(string temperature, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);

        /// <summary>Set temperature compensation move steps</summary>
        /// <param name="driverUniqueKey">Is the unique key which determines the relation between Driver and the actual device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Driver/XMC/Environment/Temperature/Compensation/Steps/{steps}")]
        Task<TemperatureCompensationMessageDriverMessageRJesResult> DriverXMCEnvironmentTemperatureCompensationSteps(string steps, [Query, AliasAs("DriverUniqueKey")] string driverUniqueKey, CancellationToken cancellationToken = default);


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace NINA.NinaPegasusPWMFlat.NinaPegasusPWMFlatDrivers
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

        [JsonPropertyName("voltage")]
        public int Voltage { get; set; }

        [JsonPropertyName("bootStrap")]
        public SwitchStateMessage BootStrap { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AdjustablePortMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AdjustablePortMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortModeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("mode")]
        public string Mode { get; set; }

        [JsonPropertyName("port")]
        public int Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortModeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AdjustablePortModeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustablePortModeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AdjustablePortModeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("voltage")]
        public double Voltage { get; set; }

        [JsonPropertyName("current")]
        public double Current { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

        [JsonPropertyName("humidity")]
        public double Humidity { get; set; }

        [JsonPropertyName("dewPoint")]
        public double DewPoint { get; set; }

        [JsonPropertyName("powerHubStatus")]
        public PowerHubStatusMessage PowerHubStatus { get; set; }

        [JsonPropertyName("usbHubStatus")]
        public USBHubStatusMessage UsbHubStatus { get; set; }

        [JsonPropertyName("dewHubStatus")]
        public ICollection<DewPortStatusMessage> DewHubStatus { get; set; }

        [JsonPropertyName("dewAutoProfile")]
        public DewAutoProfileStateMessage DewAutoProfile { get; set; }

        [JsonPropertyName("averageAmps")]
        public double AverageAmps { get; set; }

        [JsonPropertyName("ampsPerHour")]
        public double AmpsPerHour { get; set; }

        [JsonPropertyName("wattPerHour")]
        public double WattPerHour { get; set; }

        [JsonPropertyName("upTime")]
        public string UpTime { get; set; }

        [JsonPropertyName("motorPosition")]
        public MotorCurrentPositionMessage MotorPosition { get; set; }

        [JsonPropertyName("motorMoveStatus")]
        public MoveStatusMessage MotorMoveStatus { get; set; }

        [JsonPropertyName("motorDirection")]
        public MovementDirectionMessage MotorDirection { get; set; }

        [JsonPropertyName("motorBacklash")]
        public MotorBacklashMessage MotorBacklash { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AggregateReportMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AggregateReportMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportPPBMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("voltage")]
        public double Voltage { get; set; }

        [JsonPropertyName("current")]
        public double Current { get; set; }

        [JsonPropertyName("quadCurrent")]
        public double QuadCurrent { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

        [JsonPropertyName("humidity")]
        public double Humidity { get; set; }

        [JsonPropertyName("dewPoint")]
        public double DewPoint { get; set; }

        [JsonPropertyName("isOverCurrent")]
        public bool IsOverCurrent { get; set; }

        [JsonPropertyName("averageAmps")]
        public double AverageAmps { get; set; }

        [JsonPropertyName("ampsPerHour")]
        public double AmpsPerHour { get; set; }

        [JsonPropertyName("wattPerHour")]
        public double WattPerHour { get; set; }

        [JsonPropertyName("upTime")]
        public string UpTime { get; set; }

        [JsonPropertyName("dewHubStatus")]
        public DewHubStatusPPBMessage DewHubStatus { get; set; }

        [JsonPropertyName("powerHubStatus")]
        public SwitchStateMessage PowerHubStatus { get; set; }

        [JsonPropertyName("powerVariablePortStatus")]
        public SwitchStateMessage PowerVariablePortStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportPPBMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AggregateReportPPBMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateReportPPBMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AggregateReportPPBMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignInitiatorMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("status")]
        public BooleanCommandResultMessage Status { get; set; }

        [JsonPropertyName("stars")]
        public int Stars { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignInitiatorMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AlignInitiatorMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignInitiatorMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AlignInitiatorMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignPointMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("status")]
        public BooleanCommandResultMessage Status { get; set; }

        [JsonPropertyName("celestialCoordinates")]
        public CelestialCoordinatesMessage CelestialCoordinates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignPointMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AlignPointMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignPointMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AlignPointMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignStoreMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("status")]
        public BooleanCommandResultMessage Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignStoreMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AlignStoreMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlignStoreMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AlignStoreMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AltitudeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("dms")]
        public DMSMessage Dms { get; set; }

        [JsonPropertyName("dd")]
        public DDMessage Dd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AltitudeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AltitudeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AltitudeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AltitudeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutoMeridianFlipMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutoMeridianFlipMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AutoMeridianFlipMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutoMeridianFlipMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AutoMeridianFlipMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableWifiNetworksMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("networks")]
        public ICollection<WifiInfoMessage> Networks { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableWifiNetworksMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AvailableWifiNetworksMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableWifiNetworksMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AvailableWifiNetworksMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzimuthMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("dms")]
        public DMSMessage Dms { get; set; }

        [JsonPropertyName("dd")]
        public DDMessage Dd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzimuthMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public AzimuthMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzimuthMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public AzimuthMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BacklashMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public int Value { get; set; }

        [JsonPropertyName("axis")]
        public string Axis { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BacklashMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public BacklashMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BacklashMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public BacklashMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BooleanCommandResultMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("result")]
        public bool Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BooleanRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public bool Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataCollectionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("profiles")]
        public ICollection<BrightnessProfileDataMessage> Profiles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataCollectionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public BrightnessProfileDataCollectionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataCollectionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public BrightnessProfileDataCollectionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("profileID")]
        public int ProfileID { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public BrightnessProfileDataMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrightnessProfileDataMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public BrightnessProfileDataMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CelestialCoordinatesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("equatorial")]
        public EquatorialCoordinatesMessage Equatorial { get; set; }

        [JsonPropertyName("horizontal")]
        public HorizontalCoordinatesMessage Horizontal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CelestialCoordinatesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public CelestialCoordinatesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CelestialCoordinatesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public CelestialCoordinatesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("activeChannel")]
        public object ActiveChannel { get; set; }

        [JsonPropertyName("channels")]
        public ICollection<object> Channels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public ChannelStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ChannelStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudCoverageMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("percentage")]
        public int Percentage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("sensitivity")]
        public int Sensitivity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public CloudOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public CloudOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentPositionDegreesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degrees")]
        public double Degrees { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentPositionDegreesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public CurrentPositionDegreesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentPositionDegreesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public CurrentPositionDegreesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomCommandMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("request")]
        public string Request { get; set; }

        [JsonPropertyName("response")]
        public string Response { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomCommandMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public CustomCommandMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DDMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("decimalDegree")]
        public double DecimalDegree { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DECTrackingRateOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("offset")]
        public double Offset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DECTrackingRateOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DECTrackingRateOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DECTrackingRateOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DECTrackingRateOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DHMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("decimalHours")]
        public double DecimalHours { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DMSMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degree")]
        public int Degree { get; set; }

        [JsonPropertyName("minute")]
        public int Minute { get; set; }

        [JsonPropertyName("second")]
        public double Second { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("day")]
        public int Day { get; set; }

        [JsonPropertyName("month")]
        public int Month { get; set; }

        [JsonPropertyName("year")]
        public int Year { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeDayRangeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("first")]
        public DateTimeMessage First { get; set; }

        [JsonPropertyName("last")]
        public DateTimeMessage Last { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeDayRangeMessageIEnumerableRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ICollection<DateTimeDayRangeMessage> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("day")]
        public int Day { get; set; }

        [JsonPropertyName("month")]
        public int Month { get; set; }

        [JsonPropertyName("year")]
        public int Year { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

        [JsonPropertyName("hour")]
        public int Hour { get; set; }

        [JsonPropertyName("minute")]
        public int Minute { get; set; }

        [JsonPropertyName("second")]
        public int Second { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeclinationMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("dms")]
        public DMSMessage Dms { get; set; }

        [JsonPropertyName("dd")]
        public DDMessage Dd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeclinationMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DeclinationMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeclinationMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DeclinationMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceConnectionStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceConnectionStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DeviceConnectionStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceConnectionStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DeviceConnectionStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceInfo
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [JsonPropertyName("deviceID")]
        public string DeviceID { get; set; }

        [JsonPropertyName("firmware")]
        public string Firmware { get; set; }

        [JsonPropertyName("revision")]
        public string Revision { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceInfoIEnumerableRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ICollection<DeviceInfo> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewAutoAggressivenessLevelMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewAutoAggressivenessLevelMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewAutoAggressivenessLevelStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoAggressivenessLevelStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewAutoAggressivenessLevelStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoProfileStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("profileNumber")]
        public int ProfileNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoProfileStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewAutoProfileStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoProfileStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewAutoProfileStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoSwitchStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoSwitchStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewAutoSwitchStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewAutoSwitchStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewAutoSwitchStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewBootstrapStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewBootstrapStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewBootstrapStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewBootstrapStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewBootstrapStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<DewPortMessage> Hub { get; set; }

        [JsonPropertyName("aggressiveness")]
        public DewAutoAggressivenessLevelMessage Aggressiveness { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewHubMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewHubMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<DewPortStatusMessage> Hub { get; set; }

        [JsonPropertyName("autoProfile")]
        public DewAutoProfileStateMessage AutoProfile { get; set; }

        [JsonPropertyName("aggressiveness")]
        public DewAutoAggressivenessLevelStateMessage Aggressiveness { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewHubStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewHubStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusPPBMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<DewPortStatusMessage> Hub { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusPPBMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewHubStatusPPBMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewHubStatusPPBMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewHubStatusPPBMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("portNumber")]
        public int PortNumber { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

        [JsonPropertyName("autoDew")]
        public SwitchStateMessage AutoDew { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewPortMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewPortMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("number")]
        public int Number { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DewPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DewPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DewPortStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("current")]
        public PortCurrentStatusMessage Current { get; set; }

        [JsonPropertyName("port")]
        public DewPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DisplayStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DisplayStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentEntryMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("timeStamp")]
        public System.DateTimeOffset TimeStamp { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentEntryMessageIEnumerableRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ICollection<DocumentEntryMessage> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DriverStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DriverStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public DriverStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DriverStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public DriverStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationLimitMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("lower")]
        public int Lower { get; set; }

        [JsonPropertyName("higher")]
        public int Higher { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationLimitMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public ElevationLimitMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationLimitMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ElevationLimitMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("meters")]
        public int Meters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public ElevationMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElevationMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ElevationMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmptyMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmptyMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public EmptyMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmptyMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public EmptyMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentReportMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

        [JsonPropertyName("humidity")]
        public double Humidity { get; set; }

        [JsonPropertyName("dewPoint")]
        public double DewPoint { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentReportMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public EnvironmentReportMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentReportMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public EnvironmentReportMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentTemperatureMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentTemperatureMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public EnvironmentTemperatureMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentTemperatureMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public EnvironmentTemperatureMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EquatorialCoordinatesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("rightAscension")]
        public RightAscensionMessage RightAscension { get; set; }

        [JsonPropertyName("declination")]
        public DeclinationMessage Declination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EquatorialCoordinatesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public EquatorialCoordinatesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EquatorialCoordinatesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public EquatorialCoordinatesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public FilterOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public FilterOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("major")]
        public int Major { get; set; }

        [JsonPropertyName("minor")]
        public int Minor { get; set; }

        [JsonPropertyName("build")]
        public int Build { get; set; }

        [JsonPropertyName("revision")]
        public int Revision { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public FirmwareVersionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirmwareVersionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public FirmwareVersionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuideRateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("rate")]
        public double Rate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuideRateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public GuideRateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuideRateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public GuideRateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HMSMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hour")]
        public int Hour { get; set; }

        [JsonPropertyName("minute")]
        public int Minute { get; set; }

        [JsonPropertyName("second")]
        public double Second { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HorizontalCoordinatesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("altitude")]
        public AltitudeMessage Altitude { get; set; }

        [JsonPropertyName("azimuth")]
        public AzimuthMessage Azimuth { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HorizontalCoordinatesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public HorizontalCoordinatesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HorizontalCoordinatesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public HorizontalCoordinatesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ssid")]
        public string Ssid { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public HotspotMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public HotspotMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("status")]
        public SwitchStateMessage Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public HotspotStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotspotStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public HotspotStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("percentage")]
        public int Percentage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public double Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public HumidityOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumidityOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public HumidityOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IRCoefficientMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public int Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IRCoefficientMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public IRCoefficientMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IRCoefficientMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public IRCoefficientMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IlluminanceMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("lux")]
        public double Lux { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatitudeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("dms")]
        public DMSMessage Dms { get; set; }

        [JsonPropertyName("dd")]
        public DDMessage Dd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatitudeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public LatitudeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatitudeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public LatitudeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public LedStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public LedStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LevellerMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("pitch")]
        public double Pitch { get; set; }

        [JsonPropertyName("roll")]
        public double Roll { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LevellerMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public LevellerMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LevellerMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public LevellerMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LongitudeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("dms")]
        public DMSMessage Dms { get; set; }

        [JsonPropertyName("dd")]
        public DDMessage Dd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LongitudeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public LongitudeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LongitudeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public LongitudeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeridianLimitMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("eastMinutes")]
        public int EastMinutes { get; set; }

        [JsonPropertyName("westMinutes")]
        public int WestMinutes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeridianLimitMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MeridianLimitMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeridianLimitMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MeridianLimitMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorAccelerationStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorAccelerationStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorAccelerationStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorAccelerationStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorAccelerationStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorBacklashMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorBacklashMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorBacklashMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorBacklashMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorBacklashMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("current")]
        public int Current { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorCurrentMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorCurrentMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentPositionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentPositionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorCurrentPositionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorCurrentPositionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorCurrentPositionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorEncoderStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorEncoderStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorEncoderStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorEncoderStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorEncoderStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorLimitsMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("minimum")]
        public int Minimum { get; set; }

        [JsonPropertyName("maximum")]
        public int Maximum { get; set; }

        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorLimitsMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorLimitsMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorLimitsMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorLimitsMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMicrostepRatioMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ratio")]
        public int Ratio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMicrostepRatioMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorMicrostepRatioMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMicrostepRatioMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorMicrostepRatioMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveAbsoluteMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveAbsoluteMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorMoveAbsoluteMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveAbsoluteMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorMoveAbsoluteMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveRelativeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveRelativeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorMoveRelativeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorMoveRelativeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorMoveRelativeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorPositionSyncMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("steps")]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorPositionSyncMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorPositionSyncMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorPositionSyncMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorPositionSyncMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorSpeedMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("speed")]
        public int Speed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorSpeedMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorSpeedMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorSpeedMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorSpeedMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorStepSizeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorStepSizeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorStepSizeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorStepSizeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorStepSizeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorTypeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorTypeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MotorTypeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotorTypeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MotorTypeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MountModeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("mode")]
        public string Mode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MountModeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MountModeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MountModeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MountModeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveAbsolutePositionDegreesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degrees")]
        public double Degrees { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveAbsolutePositionDegreesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveAbsolutePositionDegreesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveAbsolutePositionDegreesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveAbsolutePositionDegreesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveRelativePositionDegreesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degrees")]
        public double Degrees { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveRelativePositionDegreesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveRelativePositionDegreesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveRelativePositionDegreesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveRelativePositionDegreesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degreesPerSecond")]
        public double DegreesPerSecond { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveSpeedRateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveSpeedRateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ra")]
        public MoveSpeedRateMessage Ra { get; set; }

        [JsonPropertyName("dec")]
        public MoveSpeedRateMessage Dec { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveSpeedRateStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpeedRateStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveSpeedRateStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpiralMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpiralMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveSpiralMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveSpiralMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveSpiralMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("isMoving")]
        public bool IsMoving { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MoveStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MoveStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovementDirectionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("clockwise")]
        public bool Clockwise { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovementDirectionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MovementDirectionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovementDirectionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MovementDirectionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovingDirectionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("direction")]
        public string Direction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovingDirectionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public MovingDirectionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MovingDirectionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public MovingDirectionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NMEAPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("port")]
        public SwitchStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NMEAPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public NMEAPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NMEAPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public NMEAPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NakedEyeLimitMagnitudeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("vMag")]
        public double VMag { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMHubMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<PWMPortMessage> Hub { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMHubMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PWMHubMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMHubMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PWMHubMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMPortMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("portNumber")]
        public int PortNumber { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

        [JsonPropertyName("current")]
        public double Current { get; set; }

        [JsonPropertyName("isOverCurrent")]
        public bool IsOverCurrent { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("bootStrap")]
        public SwitchStateMessage BootStrap { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMPortMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PWMPortMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PWMPortMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PWMPortMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelBrightnessLevelMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelBrightnessLevelMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PanelBrightnessLevelMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelBrightnessLevelMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PanelBrightnessLevelMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelFrequencyLevelMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelFrequencyLevelMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PanelFrequencyLevelMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelFrequencyLevelMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PanelFrequencyLevelMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelPulseLevelMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("level")]
        public int Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelPulseLevelMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PanelPulseLevelMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelPulseLevelMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PanelPulseLevelMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PanelStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PanelStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PanelStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParkMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParkMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public ParkMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParkMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ParkMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceCounterDTO
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("totalRuns")]
        public int TotalRuns { get; set; }

        [JsonPropertyName("average")]
        public long Average { get; set; }

        [JsonPropertyName("min")]
        public RunDTO Min { get; set; }

        [JsonPropertyName("max")]
        public RunDTO Max { get; set; }

        [JsonPropertyName("last")]
        public RunDTO Last { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceCounterDTOIEnumerableRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ICollection<PerformanceCounterDTO> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PierDirectionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("point")]
        public string Point { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PierDirectionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PierDirectionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PierDirectionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PierDirectionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortCurrentStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public double Value { get; set; }

        [JsonPropertyName("isOverCurrent")]
        public bool IsOverCurrent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionSyncDegreesMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("degrees")]
        public double Degrees { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionSyncDegreesMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PositionSyncDegreesMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionSyncDegreesMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PositionSyncDegreesMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ports")]
        public ICollection<SwitchPortStateMessage> Ports { get; set; }

        [JsonPropertyName("variablePort")]
        public PowerVariablePortStateMessage VariablePort { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerBootstrapMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerBootstrapMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("port")]
        public SwitchPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerBootstrapPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerBootstrapPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerBootstrapPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerConsumptionReportMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("averageAmps")]
        public double AverageAmps { get; set; }

        [JsonPropertyName("ampsPerHour")]
        public double AmpsPerHour { get; set; }

        [JsonPropertyName("wattPerHour")]
        public double WattPerHour { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerConsumptionReportMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerConsumptionReportMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerConsumptionReportMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerConsumptionReportMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDSLRPortSwitchStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDSLRPortSwitchStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerDSLRPortSwitchStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerDSLRPortSwitchStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerDSLRPortSwitchStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubBootstrapMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubBootstrapMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerHubBootstrapMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubBootstrapMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerHubBootstrapMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<PowerPortStatusMessage> Hub { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerHubStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerHubStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusPPBMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusPPBMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerHubStatusPPBMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerHubStatusPPBMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerHubStatusPPBMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("port")]
        public SwitchPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerPortStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("current")]
        public PortCurrentStatusMessage Current { get; set; }

        [JsonPropertyName("port")]
        public SwitchPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerReportMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("voltage")]
        public double Voltage { get; set; }

        [JsonPropertyName("current")]
        public double Current { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerReportMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerReportMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerReportMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerReportMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariableBootstrapMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariableBootstrapMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerVariableBootstrapMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariableBootstrapMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerVariableBootstrapMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("voltage")]
        public int Voltage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerVariablePortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerVariablePortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortSwitchStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortSwitchStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PowerVariablePortSwitchStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PowerVariablePortSwitchStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PowerVariablePortSwitchStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PressureMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hPa")]
        public double HPa { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdigyMFPowerHubStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<SwitchPortStateMessage> Hub { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdigyMFPowerHubStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public ProdigyMFPowerHubStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProdigyMFPowerHubStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public ProdigyMFPowerHubStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PulseMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("direction")]
        public string Direction { get; set; }

        [JsonPropertyName("pulseSize")]
        public int PulseSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PulseMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public PulseMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PulseMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public PulseMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RATrackingRateOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("offset")]
        public double Offset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RATrackingRateOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public RATrackingRateOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RATrackingRateOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public RATrackingRateOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RJesCode
    {

        _200 = 200,

        _201 = 201,

        _202 = 202,

        _204 = 204,

        _400 = 400,

        _401 = 401,

        _403 = 403,

        _404 = 404,

        _500 = 500,

        _501 = 501,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebootMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("timeStamp")]
        public System.DateTimeOffset TimeStamp { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebootMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public RebootMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebootMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public RebootMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefractionCompensationMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefractionCompensationMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public RefractionCompensationMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefractionCompensationMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public RefractionCompensationMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelayPortMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

        [JsonPropertyName("bootStrap")]
        public SwitchStateMessage BootStrap { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelayPortMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public RelayPortMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelayPortMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public RelayPortMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RightAscensionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hms")]
        public HMSMessage Hms { get; set; }

        [JsonPropertyName("dh")]
        public DHMessage Dh { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RightAscensionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public RightAscensionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RightAscensionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public RightAscensionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RunDTO
    {

        [JsonPropertyName("iteration")]
        public int Iteration { get; set; }

        [JsonPropertyName("elapsedMilliseconds")]
        public long ElapsedMilliseconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SQMOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("microLum")]
        public int MicroLum { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SQMOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public SQMOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SQMOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public SQMOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiderealTimeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hms")]
        public HMSMessage Hms { get; set; }

        [JsonPropertyName("dh")]
        public DHMessage Dh { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiderealTimeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public SiderealTimeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiderealTimeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public SiderealTimeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkyQualityMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("mpsas")]
        public double Mpsas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SleepModeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("minutes")]
        public int Minutes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SleepModeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public SleepModeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SleepModeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public SleepModeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateDegreeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public double Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateDegreeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public SlewRateDegreeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateDegreeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public SlewRateDegreeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public int Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public SlewRateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlewRateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public SlewRateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwitchPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("portType")]
        public string PortType { get; set; }

        [JsonPropertyName("number")]
        public int Number { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwitchStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCompensationMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("temperatureThreshold")]
        public EnvironmentTemperatureMessage TemperatureThreshold { get; set; }

        [JsonPropertyName("moveSteps")]
        public int MoveSteps { get; set; }

        [JsonPropertyName("enabled")]
        public SwitchStateMessage Enabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCompensationMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TemperatureCompensationMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureCompensationMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TemperatureCompensationMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("value")]
        public double Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TemperatureOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemperatureOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TemperatureOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hour")]
        public int Hour { get; set; }

        [JsonPropertyName("minute")]
        public int Minute { get; set; }

        [JsonPropertyName("second")]
        public int Second { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TimeMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TimeMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZoneOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("utcOffset")]
        public string UtcOffset { get; set; }

        [JsonPropertyName("hours")]
        public int Hours { get; set; }

        [JsonPropertyName("minutes")]
        public int Minutes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZoneOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TimeZoneOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZoneOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TimeZoneOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingRateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("rate")]
        public string Rate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingRateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TrackingRateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingRateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TrackingRateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("state")]
        public SwitchStateMessage State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public TrackingStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public TrackingStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ports")]
        public ICollection<SwitchPortStateMessage> Ports { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBBootstrapMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBBootstrapMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("port")]
        public SwitchPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBBootstrapPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBBootstrapPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBBootstrapPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("hub")]
        public ICollection<USBPortMessage> Hub { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBHubMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBHubMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ports")]
        public ICollection<USBPortStateMessage> Ports { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBHubStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBHubStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBHubStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("portNumber")]
        public int PortNumber { get; set; }

        [JsonPropertyName("switch")]
        public SwitchStateMessage Switch { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("bootStrap")]
        public SwitchStateMessage BootStrap { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBPortMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBPortMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortStateMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("port")]
        public SwitchPortStateMessage Port { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortStateMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public USBPortStateMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USBPortStateMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public USBPortStateMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UTCOffsetMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("offset")]
        public string Offset { get; set; }

        [JsonPropertyName("standardFormat")]
        public string StandardFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UTCOffsetMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UTCOffsetMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UTCOffsetMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UTCOffsetMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitsMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitsMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UnitsMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitsMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UnitsMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAggregateReportMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("temperature")]
        public EnvironmentTemperatureMessage Temperature { get; set; }

        [JsonPropertyName("relativeHumidity")]
        public HumidityMessage RelativeHumidity { get; set; }

        [JsonPropertyName("dewPoint")]
        public EnvironmentTemperatureMessage DewPoint { get; set; }

        [JsonPropertyName("absolutePressure")]
        public PressureMessage AbsolutePressure { get; set; }

        [JsonPropertyName("relativePressure")]
        public PressureMessage RelativePressure { get; set; }

        [JsonPropertyName("barometricAltitude")]
        public ElevationMessage BarometricAltitude { get; set; }

        [JsonPropertyName("skyQuality")]
        public SkyQualityMessage SkyQuality { get; set; }

        [JsonPropertyName("nelm")]
        public NakedEyeLimitMagnitudeMessage Nelm { get; set; }

        [JsonPropertyName("illuminance")]
        public IlluminanceMessage Illuminance { get; set; }

        [JsonPropertyName("temperatureDifference")]
        public EnvironmentTemperatureMessage TemperatureDifference { get; set; }

        [JsonPropertyName("cloudCoverage")]
        public CloudCoverageMessage CloudCoverage { get; set; }

        [JsonPropertyName("skyTemperature")]
        public EnvironmentTemperatureMessage SkyTemperature { get; set; }

        [JsonPropertyName("isGpsFixed")]
        public bool IsGpsFixed { get; set; }

        [JsonPropertyName("dateTime")]
        public System.DateTimeOffset DateTime { get; set; }

        [JsonPropertyName("latitude")]
        public LatitudeMessage Latitude { get; set; }

        [JsonPropertyName("longitude")]
        public LongitudeMessage Longitude { get; set; }

        [JsonPropertyName("totalSatellites")]
        public int TotalSatellites { get; set; }

        [JsonPropertyName("altitude")]
        public ElevationMessage Altitude { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAggregateReportMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UranusAggregateReportMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAggregateReportMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UranusAggregateReportMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAstronomicalInfoMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("sunsetMinutesFromMidnight")]
        public double SunsetMinutesFromMidnight { get; set; }

        [JsonPropertyName("sunriseMinutesFromMidnight")]
        public double SunriseMinutesFromMidnight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAstronomicalInfoMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UranusAstronomicalInfoMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusAstronomicalInfoMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UranusAstronomicalInfoMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusStorageSpaceInfoMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("totalRecords")]
        public long TotalRecords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusStorageSpaceInfoMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UranusStorageSpaceInfoMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UranusStorageSpaceInfoMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UranusStorageSpaceInfoMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMeasurementMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("rowUniqueKey")]
        public long RowUniqueKey { get; set; }

        [JsonPropertyName("isGPSFixed")]
        public bool IsGPSFixed { get; set; }

        [JsonPropertyName("dateTimeOffset")]
        public System.DateTimeOffset DateTimeOffset { get; set; }

        [JsonPropertyName("latitude")]
        public double Latitude { get; set; }

        [JsonPropertyName("longitude")]
        public double Longitude { get; set; }

        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

        [JsonPropertyName("humidity")]
        public double Humidity { get; set; }

        [JsonPropertyName("altitude")]
        public int Altitude { get; set; }

        [JsonPropertyName("pressure")]
        public double Pressure { get; set; }

        [JsonPropertyName("skyQuality")]
        public double SkyQuality { get; set; }

        [JsonPropertyName("cloudCoverage")]
        public int CloudCoverage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMeasurementResultMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("measurments")]
        public ICollection<UserMeasurementMessage> Measurments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMeasurementResultMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public UserMeasurementResultMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMeasurementResultMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public UserMeasurementResultMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("volt")]
        public double Volt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public VoltageMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoltageMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public VoltageMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WheelPositionMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("position")]
        public int Position { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WheelPositionMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public WheelPositionMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WheelPositionMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public WheelPositionMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiChannelMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("channel")]
        public int Channel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiChannelMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public WifiChannelMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiChannelMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public WifiChannelMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiInfoMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("ssid")]
        public string Ssid { get; set; }

        [JsonPropertyName("signalStrength")]
        public int SignalStrength { get; set; }

        [JsonPropertyName("isSecure")]
        public bool IsSecure { get; set; }

        [JsonPropertyName("ip")]
        public string Ip { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiInfoMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public WifiInfoMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiInfoMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public WifiInfoMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiStatusMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("connected")]
        public bool Connected { get; set; }

        [JsonPropertyName("wifiInfo")]
        public WifiInfoMessage WifiInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiStatusMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public WifiStatusMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiStatusMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public WifiStatusMessageDriverMessage Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiTransmissionPowerMessage
    {

        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonPropertyName("power")]
        public int Power { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiTransmissionPowerMessageDriverMessage
    {

        [JsonPropertyName("uniqueKey")]
        public System.Guid UniqueKey { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("message")]
        public WifiTransmissionPowerMessage Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WifiTransmissionPowerMessageDriverMessageRJesResult
    {

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("code")]
        public RJesCode Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public WifiTransmissionPowerMessageDriverMessage Data { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625